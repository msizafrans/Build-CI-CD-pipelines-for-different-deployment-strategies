name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3

      - name: Setting up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Cache before dependency install
        id: CachingData
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
        
      - name: Installing dependencies
        run: npm ci

      - name: Now Running Lint
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3

      - name: Setting up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Cache before dependency install
        id: CachingData
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
        
      - name: Installing dependencies
        run: npm ci

      - name: Now Running Tests
        run: npm run test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint,test]
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3

      - name: Building the Image
        run: docker build .

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: 952272982413.dkr.ecr.us-east-1.amazonaws.com/frontend
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-region: us-east-1

      - name: Set Docker image in Kustomize
        run: |
          kustomize edit set image frontend=${{ env.CONTAINER_FE_RELEASE_IMAGE }}:${{ github.sha }}
        working-directory: ./frontend/k8s
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          kubectl get svc
        
      - name: Apply Kubernetes resources
        run: |
          kustomize build | kubectl apply -f -
        working-directory: ./frontend/k8s
